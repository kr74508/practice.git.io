여러 개의 기본 클래스를 상속 받는 파생 클래스 형식
class 파생클래스명 :상속접근제어1 기본클래스명1,
상속접근제어2 기본클래스명2,....
상속접근제어N 기본클래스명N,....
{
  클래스 선언;
};
class Child : public Father, public Mother

기본 클래스를 상속 받을 때, 생성자는 기본 클래스가 지정된 순서대로 
왼쪽에서 오른쪽으로 실행
소멸자는 역순으로 실행

protected는 # 
#passenger;
#cargo

가상함수의 필요성
-상속 받은 함수(부모)를 실행하지 않고 자신(자식)의 함수를 실행
-기존의 클래스를 고치느니 상속을 받고, 가상함수를 이용하여 기존의 함수를 고쳐서 사용

오버라이딩: 가상함수 구현
-기본 클래스의 멤버함수와 같은 이름의 함수를 파생 클래스에서 재정의하여 사용
-재정의되는 가상함수는 기본 클래스와 함수의 리턴값, 매개변수 개수, 형이 완전히 같음
-가상함수의 구현을 중복(overriding)

바인딩(binding)
-메모리 할당이나 함수 호출이 발생했을 때 실제로 처리해야하는 명령어들이 결정되는 시점

정적(static) 바인딩, early
-컴파일시 변수의 위치와 함수가 실행할 명령이 결정
-static 변수, overloading

동적(dynamic) 바인딩, late
-실제 실행할 때(run time) 결정되는 경우
-지역 변수, overriding

정적(static) 멤버변수
-클래스의 멤버 변수 선언문에 static이라는 키워드 붙임
-객체들이 정보를 공유할 목적으로 사용하는 변수

class Point{
int x;
int y;
static int count;
public:
Point(int i, int j){x=i;y=j;}
int getX() {return x;}
int getY() {return y;}
};

객체의 멤버변수와 멤버함수
-멤버변수는 객체마다 따로 생성되고 멤버함수는 모든 객체가 공유함

정적 멤버변수의 특징
-모든 객체가 공유
-한 클래스로부터 객체가 여러 개 생성되도 이 멤버변수는 하나만 생성
-여러 객체 공유해야 하는 정보는 정적 멤버변수

class Dog{
private:
static int age;
public:
int getAge(){return age;}
void setAge(int a){age=a;}
};
int main()
{
Dog merry, happy;
:
}

가상함수(virtual function)
-오버라이딩 구현 방법
-실행시 바인딩
-기본 클래스의 멤버함수 앞에 'virtual'로 정의
-어떠한 경우라도 기본클래스의 멤버함수를 버리고 파생 클래스의 멤버함수를 사용
-기존의 클래스를 고치느니 상속을 받고 가상함수를 이용하여 마음에 들지 않는 함수만 고쳐서 사용

가상함수 형식
class 클래스명{
virtual 리턴형 함수명(매개변수){ }
:
};
class A
{
public:
virtual int SS(int i) { return(i * 2); }
//마음에 들지 않으면 재정의
//함수명, 리턴형, 매개변수의 개수와 자료형은 같고 기능만 다르게
};
class B : public A
{
public:
int SS(int i) { return(i * 3); }
//부모클래스 A의 SS함수가 마음에 들지 않아 자식클래스에서 재정의
};

C언어의 cast 연산자
-자동 형 변환
-변환시키고자 하는 값이나 변수 앞에 해당 자료형을 괄호로 묶어 주면 됨
-(자료형)값_이나_변수
ex) (int)x, (char)ch, (double)sum





