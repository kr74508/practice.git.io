상속
class CMyApp
{
public:
CMyApp();
// Overrides
public:
virtual BOOL InitInstance();
};
class 자식 : 부모 (C#, swift,kotlin)
class 자식(부모) (python)

상속성((inheritance)
-상속성을 제공하여 이러한 작업의 중복을 지양하고 프로그램의 개발시간의 단축, 기존의 프로그램의 재사용, 경비절감 등

클래스들의 계층구조
-위쪽의 클래스는 일반화되어 속성이 간단 아래 클래스들의 공통적 속성
-아래쪽 클래스는 위쪽 클래스의 속성을 상속 자신의 개별적인 속성을 추가해 많아짐

기본클래스와 파생클래스
is-a, is_a, is a 관계

-부모superclass[기본(base)클래스]
-자식subclass[파생(derived)클래스]

상속과정 inherits from

클래스 상속 형식
class 파생클래스명 :상속접근제어 기본클래스명{
};         상속접근제어
class Dog : public Animal {
}; 파생클래스명   기본클래스명
상속접근제어
Animal클래스로부터 public으로 상속받은 Dog클래스

기본(부모)클래스 
private : 상속불가

public 상속 접근인 경우에는 기본 클래스의 모든 public, protected멤버들은
파생 클래스의 public, protected 멤버가 된다.

기본 클래스의 private 멤버는 private 멤버로 남고, 파생 클래스에 의해서
접근될 수 없다.

private 상속 접근인 경우에는 기본 클래스의 모든 멤버가 파생 클래스의 private 멤버가 됨

public 멤버들은 클래스의 외부 (main함수 등)에서는 접근이 불가능 하고,
오직 파생클래스의 멤버함수에 의해서만 접근

protected 접근제어속성
-기본 클래스에서 private 멤버 속성을 유지하면서 파생 클래스가 접근하는 것이 가능
-protected 접근은 기본 클래스의 protected 멤버들이 파생 클래스의 멤버에 의해 접근될 수
있다는 것을 제외하고는 private과 같음

protected멤버+public상속
-자식클래스에서는 마음대로 접근할 수 있게 하려면 멤버의 속성을 protected
-상속은 public으로

상속에서 생성자와 소멸자
-기본 클래스 생성자는 파생 클래스 생성자보다 먼저 실행된다(부모가 있어야 자식이 태어남)
-파생 클래스의 소멸자는 기본 클래스의 소멸자보다 먼저 실행된다

매개변수가 있는 생성자를 갖는 클래스의 상속
-부모클래스의 생성자가 매개변수를 가지고 있으면 매개변수 개수 만큼 자식클래스의 객체를 만들 때 넘겨줘야 한다.

파생클래스생성자(매개변수 리스트) :기본클래스생성자(매개변수 리스트) {
    :
}

계층적 다중 상속
-기본 클래스를 상속 받을 수 있다
-파생 클래스가 또 다른 파생 클래스의 기본 클래스로 사용되는 방법으로 다중 클래스 계층을 형성

주요 MFC의 계층 구조
CObject-거의 모든 MFC 클래스의 기반 클래스
  ㄴCCmdTarget-커맨드(명령) 메시지를 받는 기능
      ㄴCWinApp-프로그램을 구동시키는 기능
      ㄴCDocument-데이터를 저장하고 처리하는 기능
      ㄴCwnd-윈도우에 관련된 기능 (눈에 보이는 오브젝트)
          ㄴCFrameWnd-프로그램 윈도우 프레임(외곽)을 관리하는 기능
          ㄴCView-데이터를 보여주는 윈도우를 관리하는 기능




