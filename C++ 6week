다양성(polymorphism) 종류
-보편적 다형성 -포합 다형성-상속
              -인자 다형성-템플릿
-불규칙 다형성-중첩-함수/연산자
             -코어션-형변환

우선순위-Precedence
결합성-Associativity

:: 우선순위 1

연산자 중첩의 필요성
-연산자의 의미를 확대 재정

*선언문(구두점) : 실행문(연산자)
-선언문 : 포인터를 선언할때
-실행문 : 주소로 가서 값을 가져올 때
주소로 가서 실제 데이터 값을 가져오는데 사용

this 포인터
-객체를 통해 멤버 호출시 컴파일러 객체의 포인터 주소를 this 포인터에 넣은 다음 멤버 호출
-멤버함수 수행후 객체 자신 리턴 return *this
-멤버함수에서 this 포인터는 어떤 객체가 자신을 호출했는지 확인할때 사용

연산자 중첩 형식
-객체와 객체사이의 연산
단항연산자 중첩
-리턴형 operator 연산자명(); 전치, ++x
연산후 대입
리턴형 operator 연산자명();
void operator ++()
{
++i;
}
-리턴형 operator 연산자명(int); 후치, x++
대입후 연산
리턴형 operator 연산자명(int);
void operator ++(int)
{
i++;
}

이항연산자 중첩
-연산자 양쪽에 피연산자가 필요한 연산자
-한개의 매개변수가 필요
리턴형 operator 연산자명(매개변수);
void operator +(int x)
{
:
}

형변환 함수(type conversion function)
-한 객체의 자료형을 다른 객체의 자료형으로 변환할시 사용
operator 리턴형() {return 변환값;}
-리턴형은 변환하고자 하는 자료형
-변환값은 변환을 수행할 값

연산자 중첩 제약
-모든 연산자가 중첩x
. .* :: ?: sizeof )불가

연산자 중첩 주의사항
-우선순위 변경 불가
-단항을 다항연산자로 변경 X
-임의의 새로운 연산자 정의 불가
- "=" 연산자를 제외
-파생(자식) 클래스에 상속된다










